#Script Adapted for actions from here: https://github.com/felickz/scripts/blob/main/pwsh/Get-GitHubReposWithFailingCodeQL.ps1
name: Run CodeQL Failing Workflow Org Script
on: 
  push:
    paths:
      - '.github/workflows/codeql-org-report.yml'
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'
jobs:
  run-script:
    runs-on: ubuntu-latest
  
    steps:
    - shell: pwsh
      env:
        # PASS In a ${{secrets.MY_GH_TOKEN}} for private repos!
        GH_TOKEN: ${{ github.token }}
      run: |
        # find any CodeQL named runs and get their latest status
        # - use the gh cli (easy auth and query apis)
        # - search for all repos in an org
        # - workflows named "CodeQl" running in an action - EXCLUDE PRs
        # - Report if the scans were building successful or not (conclusion)
        
        
        $org = "${{ github.repository_owner }}"
        $csv = "CodeQLWorkflowStatus.csv"
        $header = "Conclusion,Workflow_Url,Is_Default,Org,Repo,Workflow_Path"
        Set-Content -Path "./$csv" -Value $header
        
        gh api /orgs/$org/repos --paginate `
        | jq -r '.[] | .name' `
        | %{ `
            $name = $_; gh api /repos/$org/$_/actions/workflows --paginate `
            # Need jq -c (compact) so that the JSON removes newlines and can be converted below `
            | jq -c '.workflows[] | select(.name=="CodeQL") | {id: .id, path: .path}' `
            | %{ `
                $workflow = $_ | ConvertFrom-Json; `
                gh api /repos/$org/$name/actions/workflows/$($workflow.id)/runs?exclude_pull_requests=true `
                } `
            | jq -r '.workflow_runs[0] | "\(.conclusion),\(.html_url)"' `
            | %{ "$_,$($workflow.path.StartsWith("dynamic/")),$org,$name,$($workflow.path)" } `
            | Add-Content -Path "./$csv" `
        }
        
        
        #check if FormatMarkdownTable module is installed
        if (Get-Module -ListAvailable -Name FormatMarkdownTable -ErrorAction SilentlyContinue) {
            Write-Output "FormatMarkdownTable module is installed"
        }
        else {
            # Handle `Untrusted repository` prompt
            Set-PSRepository PSGallery -InstallationPolicy Trusted
            #directly to output here before module loaded to support Write-ActionInfo
            Write-Output "FormatMarkdownTable module is not installed.  Installing from Gallery..."
            Install-Module -Name FormatMarkdownTable
        }
        
        $markdownSummary = Import-Csv -Path "./$csv" | Format-MarkdownTableTableStyle -ShowMarkdown -DoNotCopyToClipboard -HideStandardOutput
        $markdownSummary > $env:GITHUB_STEP_SUMMARY
        
        if ($null -eq $env:GITHUB_ACTIONS) {
            $markdownSummary
        }
    - name: Upload CSV
      uses: actions/upload-artifact@v3
      with:
        path: ./*.csv
        

